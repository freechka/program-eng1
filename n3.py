'''Вычислить значение F(x) = F1(x) + F2(x) для диапазона аргументов х.
Шаг по х принять 0.1 для обычных функций и 0,05π если диапазон х задан в долях π.
Вывести в консоль результирующую таблицу в формате:
Примечание-1. Учитывать вероятность возникновения ошибок при вычислениях при различных
значениях х в диапазоне.
Примечание-2. Если F1 вызывает ошибку вычислений, F2 не считать.
Примечание-3. Если F1 либо F2 вызывают ошибку вычислений, F не считать. '''
import math

y = 1
z = 6

def f1_r(x):
    if (2*z + pow(z, 3)) <= 0 or y == 0 or x == 0:
        return None
    return (pow(math.cos(x), 2) + 5 * pow(math.sin(y), 3)) / math.log(2*z + pow(z, 3))

def f2_r(x):
    if (2 * z - pow(y, 2)) < 0 or (7 * x - ((7 * x) / pow(y, 2))) <= 0 or (4 * pow(x, 2) + 5 * pow(y, 3)) / math.sqrt(2 * z - pow(y, 2)) > -1 or (4 * pow(x, 2) + 5 * pow(y, 3)) / math.sqrt(2 * z - pow(y, 2)) < -1:
        return None
    return math.asin((4 * pow(x, 2) + 5 * pow(y, 3)) / math.sqrt(2 * z - pow(y, 2))) / math.log(math.sqrt(7 * x - ((7 * x) / pow(y, 2))))

x_start = 5
x_end = 6
step = 0.1

print(f"{'x':>10} {'F1(x)':>15} {'F2(x)':>15} {'F(x)':>15}")

x = x_start
while x <= x_end:
    f1 = f1_r(x)
    if f1 is None:
        print(f"{x:>10} {'Ошибка':>15} {'Ошибка':>15} {'Ошибка':>15}")
    else:
        f2 = f2_r(x)
        if f2 is None:
            print(f"{x:>10.1f} {f1:>15.3f} {'Ошибка':>15} {'Ошибка':>15}")
        else:
            f = f1 + f2
            print(f"{x:>10.1f} {f1:>15.3f} {f2:>15.3f} {f:>15.3f}")
    x += step